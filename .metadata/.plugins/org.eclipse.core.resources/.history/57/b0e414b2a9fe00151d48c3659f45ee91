/*
 ============================================================================
 Name        : a.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include "itoa.h"
/*    parameters:
 *            - Buffer must be 8 chars long
 *            - 3 digits precision max
 *            - absolute range is -524,287 to 524,287
 *            - resolution (epsilon) is 0.125 and
 *              always rounds down
 **************************************************/
 // convert float to string one decimal digit at a time
 // assumes float is < 65536 and ARRAYSIZE is big enough
 // problem: it truncates numbers at size without rounding
 // str is a char array to hold the result, float is the number to convert
 // size is the number of decimal digits you want
 void FloatToStringNew(char *str, float f, char size)
 {
 	char pos;  // position in string
 	char len;  // length of decimal part of result
 	char* curr;  // temp holder for next digit
 	int value;  // decimal digit(s) to convert
 	pos = 0;  // initialize pos, just to be sure

 	value = (int)f;  // truncate the floating point number
 	itoa(value,str, 10);  // this is kinda dangerous depending on the length of str
 	// now str array has the digits before the decimal

 	if (f < 0 )  // handle negative numbers
 	{
 		f *= -1;
 		value *= -1;
 	}

     len = strlen(str);  // find out how big the integer part was
 	pos = len;  // position the pointer to the end of the integer part
 	str[pos++] = '.';  // add decimal point to string

 	while(pos < (size + len + 1) )  // process remaining digits
 	{
 		f = f - (float)value;  // hack off the whole part of the number
 		f *= 10;  // move next digit over
 		value = (int)f;  // get next digit
 		itoa(value, curr); // convert digit to string
 		str[pos++] = *curr; // add digit to result string and increment pointer
 	}
 }
 }
int main(void) {
	float n = 1.12;
	char ch[12];
	char *ptr = ch;
	ftoa(n, ptr);
	printf("%s", ch);
	return 0;
}
